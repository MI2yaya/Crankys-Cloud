---
import type {
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";

import PixelarticonsArrowLeft from '~icons/pixelarticons/arrow-left';
import PixelarticonsArrowRight from '~icons/pixelarticons/arrow-right';

import BaseLayout from '../../layouts/BaseLayout.astro';
import Card, { type Props as CardProps } from '../../components/Card.astro';

export const getStaticPaths = (({ paginate }) => {
	const cards: CardProps[] = Array(40).fill(0).map((_, i) => ({
		id: i.toString(),
		title: "Title" + Math.round(Math.random() * 1000),
		author: "Author",
		mapper: "Mapper",
		image: `/textures/default.png`
	}))

	return paginate(cards, { pageSize: 10 });
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

// All paginated data is passed on the "page" prop
const { page } = Astro.props;
---

<BaseLayout>
	<header>
		<h1>Cranky's Cloud</h1>
	</header>
	<main>
		<input id="search" type="text" placeholder="Search...">
		<div class="levelsContainer">
			<div id="levels">
				{page.data.map(card => (<Card {...card} />))}
			</div>
		</div>
		<div class="navigation">
			<a href={page.url.prev}>
				<PixelarticonsArrowLeft width="24px" height="24px" />
				previous
			</a>
			<a href={page.url.next}>
				next
				<PixelarticonsArrowRight width="24px" height="24px" />
			</a>
		</div>
	</main>
	<footer>
		<p>See the <a href="https://github.com/MI2yaya/Crankys-Cloud">source code</a>.</p>
	</footer>
</BaseLayout>

<style lang="scss">
	header {
		width: 100%;
		flex-grow: 0;
		text-align: center;
		padding: 6px;
		background-color: rgb(219, 219, 219);
		margin-bottom: 1rem;
	}

	footer {
		margin-top: 1rem;
		background-color: rgb(219, 219, 219);
		padding: 6px;
	}

	main {
		margin: auto;
		flex-grow: 1;

		// I want to preserve the semantic `main` here, so we're nesting into flex
		// again for `.levelsContainer` to take only the remaining height
		display: flex;
		flex-direction: column;

		input {
			width: 100%;
			margin-bottom: 1rem;

			border: 2px solid black;
			padding: 6px;
		}
	}

	.navigation {
		margin-top: 1rem;
		margin-bottom: 1rem;
		font-size: 24px;
		text-align: center;
		display: flex;
		gap: 1rem;
		justify-content: center;

		a {
			color: black;
			cursor: pointer;

			display: flex;
			align-items: center;
			gap: 0.5rem;
		}
	}

	.levelsContainer {
		border: 2px solid black;
		border-bottom: none;
		flex: 1;
	}

	#levels {
		width: 100%;
		display: grid;
		grid-template-columns: auto auto;

		overflow-y: scroll;
		max-height: 100%;

		// To create the impression of a 2px border between elements
		gap: 2px;
		background-color: black;
		border-bottom: 2px solid black;
	}
</style>
