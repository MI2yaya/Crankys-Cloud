---
import PixelarticonsArrowLeft from "~icons/pixelarticons/arrow-left";
import PixelarticonsArrowRight from "~icons/pixelarticons/arrow-right";
import Card from "./Card.astro";
import { actions } from "astro:actions";
import type { Session } from "@auth/core/types";

interface Props {
    page: number;
    root: string;
    session?: Session;

    inDashboard: boolean;
    inTitle?: string;
}

// session to allow the user to edit their own maps
const { page, root, session, inDashboard, inTitle } = Astro.props;

const { data, error } = await Astro.callAction(actions.getCards, {
    page,
    // Grab only the charts by the user if on the dashboard
    mapper: inDashboard ? session?.user?.id! : undefined,
    inTitle
});

if (error) {
    throw Error(error); // TODO
}

const { tracks, nextPage } = data;
---

<div class="levelsContainer">
    <div id="levels">
        {tracks.map((card) => <Card data={card} showMapper={!inDashboard} />)}
    </div>
</div>
<div class="navigation">
    <a href={page === 1 ? null : `${root}${page - 1}`}>
        <PixelarticonsArrowLeft width="24px" height="24px" />
        previous
    </a>
    <a href={nextPage ? `/page/${page + 1}` : null}>
        next
        <PixelarticonsArrowRight width="24px" height="24px" />
    </a>
</div>

<style lang="scss">
    .navigation {
        margin-top: 1rem;
        margin-bottom: 1rem;
        font-size: 24px;
        text-align: center;
        display: flex;
        gap: 1rem;
        justify-content: center;

        a {
            color: black;
            cursor: pointer;

            display: flex;
            align-items: center;
            gap: 0.5rem;

            &:not(&[href]) {
                color: gray;
                cursor: default;
            }
        }
    }

    .levelsContainer {
        border: 2px solid black;
        flex: 1;
        overflow-y: auto;
        min-height: 0;

        //hide scrollbar
        &::-webkit-scrollbar {
            display: none;
        }
        scrollbar-width: none;
    }

    #levels {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(2, 1fr);

        max-height: 100%;

        // switched to rem
        gap: 1rem;
        padding: 1rem;
    }
</style>
